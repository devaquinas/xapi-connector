// Generated by CoffeeScript 1.7.1
(function() {
  var Connector, Wrapper,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Connector = require('./xapi-connector.js');

  Wrapper = (function(_super) {
    __extends(Wrapper, _super);

    function Wrapper(server_url, conn_port, stream_port, username, password) {
      this.onStreamClose = __bind(this.onStreamClose, this);
      this.onStreamError = __bind(this.onStreamError, this);
      this.onStreamOpen = __bind(this.onStreamOpen, this);
      this.onClose = __bind(this.onClose, this);
      this.onError = __bind(this.onError, this);
      this.onOpen = __bind(this.onOpen, this);
      Wrapper.__super__.constructor.call(this, server_url, conn_port, stream_port, username, password);
      this.handlers = {};
      this.stream_handlers = {};
      this.env = {
        indicators: {},
        symbols: {},
        quotes: {},
        orders: {},
        trades: {},
        messages: {}
      };
      return;
    }

    Wrapper.prototype.onOpen = function() {
      this.env.conn_status = true;
      this.env.last_conn = new Date().getTime();
      if (this.handlers.open != null) {
        this.handlers.open();
      }
    };

    Wrapper.prototype.onMessage = function(msg) {
      msg = JSON.parse(msg);
      if (this.handlers[this.env.messages[msg.customTag].command] != null) {
        if (msg.status === true) {
          this.handlers[this.env.messages[msg.customTag].command](msg);
        } else {
          this.onApiError(msg);
        }
      } else {
        throw new Error("There is no handler for the message");
      }
    };

    Wrapper.prototype.onError = function(err) {
      this.env.conn_status = false;
      console.log(err);
      this.reconnect();
    };

    Wrapper.prototype.reconnect = function() {
      var now;
      now = new Date().getTime();
      if (this.env.conn_status === false && (now - this.env.last_conn >= 2000 || this.env.last_conn === void 0)) {
        console.log('Connection lost, reconnecting...');
        this.resetState();
        this.connect();
        this.env.last_conn = new Date().getTime();
      } else {
        setTimeout(this.reconnect.bind(this), 2000 - (now - this.env.last_conn));
      }
    };

    Wrapper.prototype.onClose = function() {
      this.env.conn_status = false;
      console.log('Connection closed');
    };

    Wrapper.prototype.onStreamMessage = function(msg) {
      msg = JSON.parse(msg);
      if (this.stream_handlers[msg.command] != null) {
        this.stream_handlers[msg.command](msg);
      } else {
        throw new Error('There is no handler for this msg');
      }
    };

    Wrapper.prototype.onStreamOpen = function() {
      this.env.stream_status = true;
      if (this.stream_handlers.open != null) {
        this.stream_handlers.open();
      }
    };

    Wrapper.prototype.onStreamError = function(err) {
      this.env.stream_status = false;
      console.log(err);
    };

    Wrapper.prototype.onStreamClose = function() {
      this.env.stream_status = false;
      console.log('Stream closed');
    };

    Wrapper.prototype.onApiError = function(msg) {
      if (msg.redirect != null) {
        this.disconnect();
        this.resetState();
        this.server_url = msg.redirect.address;
        this.conn_port = msg.redirect.mainPort;
        this.stream_port = msg.redirect.streamingPort;
        return this.connect();
      } else {
        console.log("The response for command " + this.env.messages[msg.customTag].command + " has status false: " + (JSON.stringify(msg, null, 4)));
      }
    };

    Wrapper.prototype.resetState = function() {
      Wrapper.__super__.resetState.call(this);
      this.env = {
        indicators: {},
        symbols: {},
        quotes: {},
        orders: {},
        trades: {},
        messages: {}
      };
    };

    Wrapper.prototype.on = function(event, callback) {
      return this.handlers[event] = callback;
    };

    Wrapper.prototype.onStream = function(event, callback) {
      return this.stream_handlers[event] = callback;
    };

    Wrapper.prototype.login = function(args) {
      this.conn.send(this.buildCommand('login', args));
    };

    Wrapper.prototype.logout = function() {
      this.conn.send(this.buildCommand('logout'));
    };

    Wrapper.prototype.addOrder = function(args) {
      this.conn.send(this.buildCommand('addOrder', args));
    };

    Wrapper.prototype.closePosition = function(args) {
      this.conn.send(this.buildCommand('closePosition', args));
    };

    Wrapper.prototype.closePositions = function(args) {
      this.conn.send(this.buildCommand('closePositions', args));
    };

    Wrapper.prototype.deletePending = function(args) {
      this.conn.send(this.buildCommand('deletePending', args));
    };

    Wrapper.prototype.getAccountIndicators = function() {
      this.conn.send(this.buildCommand('getAccountIndicators'));
    };

    Wrapper.prototype.getAccountInfo = function(args) {
      this.conn.send(this.buildCommand('getAccountInfo', args));
    };

    Wrapper.prototype.getAllSymbols = function(args) {
      this.conn.send(this.buildCommand('getAllSymbols', args));
    };

    Wrapper.prototype.getCalendar = function(args) {
      this.conn.send(this.buildCommand('getCalendar', args));
    };

    Wrapper.prototype.getCashOperationsHistory = function(args) {
      this.conn.send(this.buildCommand('getCashOperationsHistory', args));
    };

    Wrapper.prototype.getCommisionsDef = function(args) {
      this.conn.send(this.buildCommand('getCommisionsDef', args));
    };

    Wrapper.prototype.getlbsHistory = function(args) {
      this.conn.send(this.buildCommand('getlbsHistory', args));
    };

    Wrapper.prototype.getMarginTrade = function(args) {
      this.conn.send(this.buildCommand('getMarginTrade', args));
    };

    Wrapper.prototype.getNews = function(args) {
      this.conn.send(this.buildCommand('getNews', args));
    };

    Wrapper.prototype.getOrderStatus = function(args) {
      this.conn.send(this.buildCommand('getOrderStatus', args));
    };

    Wrapper.prototype.getProfitCalculations = function(args) {
      this.conn.send(this.buildCommand('getProfitCalculations', args));
    };

    Wrapper.prototype.getServerTime = function(args) {
      this.conn.send(this.buildCommand('getServerTime', args));
    };

    Wrapper.prototype.getStepRules = function(args) {
      this.conn.send(this.buildCommand('getStepRules', args));
    };

    Wrapper.prototype.getSymbol = function(args) {
      this.conn.send(this.buildCommand('getSymbol', args));
    };

    Wrapper.prototype.getTickPrices = function(args) {
      this.conn.send(this.buildCommand('getTickPrices', args));
    };

    Wrapper.prototype.getTradeRecords = function(args) {
      this.conn.send(this.buildCommand('getTradeRecords', args));
    };

    Wrapper.prototype.getTrades = function(args) {
      this.conn.send(this.buildCommand('getTrades', args));
    };

    Wrapper.prototype.getTradesHistory = function(args) {
      this.conn.send(this.buildCommand('getTradesHistory', args));
    };

    Wrapper.prototype.getTradingHours = function(args) {
      this.conn.send(this.buildCommand('getTradingHours', args));
    };

    Wrapper.prototype.getVersion = function(args) {
      this.conn.send(this.buildCommand('getVersion', args));
    };

    Wrapper.prototype.modifyPending = function(args) {
      this.conn.send(this.buildCommand('modifyPending', args));
    };

    Wrapper.prototype.modifyPosition = function(args) {
      this.conn.send(this.buildCommand('modifyPosition', args));
    };

    Wrapper.prototype.ping = function(args) {
      this.conn.send(this.buildCommand('ping', args));
    };

    Wrapper.prototype.subscribeAccountIndicators = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getAccountIndicators', stream_session_id));
    };

    Wrapper.prototype.subscribeCandles = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getCandles', stream_session_id));
    };

    Wrapper.prototype.subscribeKeepAlive = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getKeepAlive', stream_session_id));
    };

    Wrapper.prototype.subscribeNews = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getNews', stream_session_id));
    };

    Wrapper.prototype.subscribeOrderStatus = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getOrderStatus', stream_session_id));
    };

    Wrapper.prototype.subscribeProfits = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getProfits', stream_session_id));
    };

    Wrapper.prototype.subscribeTickPrices = function(stream_session_id, symbols) {
      return this.stream.send(this.buildStreamCommand('getTickPrices', stream_session_id, symbols));
    };

    Wrapper.prototype.subscribeTrades = function(stream_session_id) {
      return this.stream.send(this.buildStreamCommand('getTrades', stream_session_id));
    };

    return Wrapper;

  })(Connector);

  module.exports = Wrapper;

}).call(this);
