// Generated by CoffeeScript 1.7.1
(function() {
  var CONN_PORT, Connector, PASSWORD, SERVER_URL, STREAM_PORT, USERNAME, api, print;

  Connector = require('./xapi-connector.js');

  process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

  SERVER_URL = 'xapia.x-station.eu';

  CONN_PORT = '5144';

  STREAM_PORT = '5145';

  USERNAME = '177509';

  PASSWORD = 'ystk7C';

  print = function(msg) {
    console.log(msg + '\n');
  };

  api = new Connector(SERVER_URL, CONN_PORT, STREAM_PORT, USERNAME, PASSWORD);

  api.onOpen = function(msg) {
    print('Successfuly connected to market server, login in.');
    api.conn.send(api.buildCommand('login', {
      userId: api.username,
      password: api.password
    }, 'login'));
  };


  /*lets just forward the message to an appropriate handler defined later
  we will use the customTag to know which handler we should forward to
   */

  api.onMessage = function(msg) {
    print("Received a stream message, " + msg);
    msg = JSON.parse(msg);
    print("Received response to command: " + msg.customTag);
    if (api.handlers[msg.customTag] != null) {
      api.handlers[msg.customTag](msg);
    } else {
      throw new Error('There is no handler for this msg');
    }
  };

  api.onError = function(err) {
    print(err);
  };

  api.onClose = function() {
    print('Successfuly closed the connection');
  };

  api.handlers = {
    login: (function(_this) {
      return function(msg) {
        print('Entering login handler');
        if (msg.status === true) {
          api.env.stream_session_id = msg.streamSessionId;
          print('The login was succesfull. Lets get the information on the available symbols');
          api.conn.send(api.buildCommand('getAllSymbols', null, 'getAllSymbols'));
        } else {
          print('There was an error login in');
        }
      };
    })(this),
    getAllSymbols: (function(_this) {
      return function(msg) {
        print('Entering getAllSymbols handler');
        print('We successfully received data on the available symbols. Now lets connect to the stream');
        api.connectStream();
      };
    })(this),
    logout: (function(_this) {
      return function(msg) {
        print('Entering logout handler, closing sockets');
        if (msg.status === true) {
          api.conn.end();
        }
      };
    })(this)
  };

  api.onStreamOpen = function(msg) {
    print('Successfuly connected to stream server, subscribing to indicators.');
    api.stream.send(api.buildStreamCommand("getAccountIndicators", api.env.stream_session_id));
    print('Lets also subscribe to EURUSD tick prices');
    api.stream.send(api.buildStreamCommand("getTickPrices", api.env.stream_session_id, ['EURUSD']));
  };


  /*lets just forward the message to an appropriate stream handler defined later
  we will use the customTag to know which handler we should forward to
   */

  api.onStreamMessage = function(msg) {
    msg = JSON.parse(msg);
    print("Received response to command: " + msg.command);
    if (api.stream_handlers[msg.command] != null) {
      api.stream_handlers[msg.command](msg);
    } else {
      throw new Error('There is no handler for this msg');
    }
  };

  api.onStreamError = function(err) {
    print(err);
  };

  api.onStreamClose = function() {
    print('Successfuly closed the stream');
  };

  api.stream_handlers = {
    indicators: (function(_this) {
      return function(msg) {
        print(JSON.stringify(msg));
      };
    })(this),
    tickPrices: (function(_this) {
      return function(msg) {
        print(JSON.stringify(msg));
      };
    })(this)
  };

  api.connect();

  setTimeout(function() {
    return api.conn.send(api.buildCommand('logout', null, 'logout'));
  }, 20000);

}).call(this);
