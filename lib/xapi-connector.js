// Generated by CoffeeScript 1.7.1
(function() {
  var Connector, dispatcher, moment, print, tls,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  tls = require('tls');

  moment = require('moment');

  dispatcher = require('./dispatcher.js');

  print = function(msg) {
    console.log(msg + '\n');
  };

  Connector = (function() {
    function Connector(server_url, conn_port, stream_port, username, password) {
      this.server_url = server_url;
      this.conn_port = conn_port;
      this.stream_port = stream_port;
      this.username = username;
      this.password = password;
      this.onStreamChunk = __bind(this.onStreamChunk, this);
      this.onChunk = __bind(this.onChunk, this);
      this.msg = '';
      this.stream_msg = '';
      this.env = {};
    }

    Connector.prototype.buildCommand = function(command, args, tag) {
      var com;
      com = {
        command: (function() {
          if (command != null) {
            return command;
          } else {
            throw new Error('Missing command');
          }
        })()
      };
      if (args != null) {
        com["arguments"] = args;
      }
      if (tag != null) {
        com.customTag = tag;
      }
      return JSON.stringify(com);
    };

    Connector.prototype.buildStreamCommand = function(command, stream_session_id, symbols) {
      var com;
      com = {
        command: (function() {
          if (command != null) {
            return command;
          } else {
            throw new Error('Missing command');
          }
        })()
      };
      if (stream_session_id != null) {
        com.streamSessionId = stream_session_id;
      }
      if (symbols != null) {
        com.symbols = symbols;
      }
      return JSON.stringify(com);
    };

    Connector.prototype.connect = function() {
      this.conn = tls.connect(this.conn_port, this.server_url, this.onOpen);
      this.conn.setEncoding('utf-8');
      this.conn.dispatcher = new dispatcher(this.conn, 205);
      this.conn.send = (function(_this) {
        return function(msg) {
          return _this.conn.dispatcher.add(msg);
        };
      })(this);
      this.conn.addListener('data', this.onChunk);
      this.conn.addListener('error', this.onError);
      this.conn.addListener('close', this.onClose);
    };

    Connector.prototype.onChunk = function(data) {
      var res, responses, _i, _len;
      responses = data.split('\n\n');
      if (responses.length === 1) {
        this.msg += responses[0];
      } else {
        responses = (function() {
          var _i, _len, _ref, _results;
          _ref = data.split('\n\n');
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            res = _ref[_i];
            if (res !== '') {
              _results.push(res);
            }
          }
          return _results;
        })();
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          res = responses[_i];
          this.msg += res;
          this.onMessage(this.msg);
          this.msg = '';
        }
      }
    };

    Connector.prototype.connectStream = function() {
      this.stream = tls.connect(this.stream_port, this.server_url, this.onStreamOpen);
      this.stream.setEncoding('utf-8');
      this.stream.dispatcher = new dispatcher(this.stream, 205);
      this.stream.send = (function(_this) {
        return function(msg) {
          return _this.stream.dispatcher.add(msg);
        };
      })(this);
      this.stream.addListener('data', this.onStreamChunk);
      this.stream.addListener('error', this.onStreamError);
      this.stream.addListener('close', this.onStreamClose);
    };

    Connector.prototype.onStreamChunk = function(data) {
      var res, responses, _i, _len;
      responses = data.split('\n\n');
      if (responses.length === 1) {
        this.stream_msg += responses[0];
      } else {
        responses = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = responses.length; _i < _len; _i++) {
            res = responses[_i];
            if (res !== '') {
              _results.push(res);
            }
          }
          return _results;
        })();
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          res = responses[_i];
          this.stream_msg += res;
          this.onStreamMessage(this.stream_msg);
          this.stream_msg = '';
        }
      }
    };

    return Connector;

  })();

  module.exports = Connector;

}).call(this);
