// Generated by CoffeeScript 1.7.1

/*
The Dispatcher class.
It takes asynchronous requests to send something through the stream
and sends it asynchronously in intervals
 */

(function() {
  var Dispatcher;

  Dispatcher = (function() {
    function Dispatcher(stream, delay, que, last, clearing_que) {
      this.stream = stream;
      this.delay = delay != null ? delay : 0;
      this.que = que != null ? que : [];
      this.last = last != null ? last : 0;
      this.clearing_que = clearing_que != null ? clearing_que : false;
    }

    Dispatcher.prototype.add = function(msg) {
      this.que.push(msg);
      if (this.clearing_que === false) {
        return this.clearQue();
      }
    };

    Dispatcher.prototype.clearQue = function() {
      var diff, msg;
      this.clearing_que = true;
      diff = new Date().getTime() - this.last;
      if (diff > this.delay) {
        console.log("Sending message: " + (msg = this.que.shift()) + " \n");
        this.stream.write(msg);
        this.last = new Date().getTime();
        if (this.que.length > 0) {
          return setTimeout(this.clearQue.bind(this), this.delay + 1);
        } else {
          return this.clearing_que = false;
        }
      } else {
        return setTimeout(this.clearQue.bind(this), this.delay + 1 - diff);
      }
    };

    return Dispatcher;

  })();

  module.exports = Dispatcher;

}).call(this);
